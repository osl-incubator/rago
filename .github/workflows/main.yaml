name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  check-branch:
    runs-on: ubuntu-latest

    timeout-minutes: 2
    concurrency:
      group: ci-check-branch-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4
        if: ${{ github.event_name == 'pull_request' }}
        with:
          fetch-depth: 0

      - name: Check if the PR's branch is updated
        if: ${{ github.event_name == 'pull_request' }}
        uses: osl-incubator/gh-check-pr-is-updated@1.0.0
        with:
          remote_branch: origin/main
          pr_sha: ${{ github.event.pull_request.head.sha }}

  tests:
    strategy:
      fail-fast: false
      matrix:
        python_version:
          - "3.11"
          - "3.12"
          # - "3.13"
        os:
          - "ubuntu"
          - "macos"
          - "windows"
        exclude:
          - os: windows
            python_version: "3.9"

    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 20

    defaults:
      run:
        shell: bash -l {0}

    concurrency:
      group: ci-tests-${{ matrix.os }}-${{ matrix.python_version }}-${{ github.ref }}
      cancel-in-progress: true

    env:
      HF_TOKEN: "nokey"
      OPENAI_API_KEY: "nokey"
      GEMINI_API_KEY: "nokey"
      COHERE_API_KEY: "nokey"
      FIREWORKS_API_KEY: "nokey"
      TOGETHER_API_KEY: "nokey"
      GROQ_API_KEY: "nokey"
      TOKENIZERS_PARALLELISM: false
      OLLAMA_LLM_LIBRARY: cpu

    steps:
      - uses: actions/checkout@v4

      - name: Cache ollama
        uses: actions/cache@v4
        with:
          path: ~/.ollama
          key: ${{ matrix.os }}-ollama

      - name: Setup ollama macos
        if: ${{ matrix.os == 'macos' }}
        uses: ai-action/setup-ollama@v1

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          environment-file: conda/ci-${{ matrix.os }}.yaml
          channels: conda-forge,nodefaults
          activate-environment: rago
          auto-update-conda: true
          conda-solver: libmamba
          python-version: "${{ matrix.python_version }}"

      - name: Install dependencies
        run: ./scripts/install-dev-linux-cpu.sh

      - name: Setup ollama linux/windows
        if: ${{ matrix.os != 'macos' }}
        run: |
          ollama serve &

      - name: Download llama model
        run: |
          sleep 20
          ollama pull llama3.2:1b

      - name: Run unit tests (PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: pytest -m "not skip_on_ci" -vvv

      - name: Run unit tests (push)
        if: ${{ github.event_name == 'push' }}
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
          FIREWORKS_API_KEY: ${{ secrets.FIREWORKS_API_KEY }}
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        run: makim tests.unit

      - name: Semantic Release PR Title Check
        uses: osl-incubator/semantic-release-pr-title-check@v1.4.1
        if: success() || failure()
        with:
          convention-name: conventionalcommits

      - name: Setup tmate session
        if: "${{ failure() && (contains(github.event.pull_request.labels.*.name, 'ci:enable-debugging')) }}"
        uses: mxschmitt/action-tmate@v3

  linter:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    defaults:
      run:
        shell: bash -l {0}

    concurrency:
      group: ci-linter-${{ matrix.os }}-${{ matrix.python_version }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          environment-file: conda/ci-ubuntu.yaml
          channels: conda-forge,nodefaults
          activate-environment: rago
          auto-update-conda: true
          conda-solver: libmamba
          python-version: "3.11"

      - name: Install dependencies
        run: ./scripts/install-dev-linux-cpu.sh

      - name: Run style checks
        if: success() || failure()
        run: |
          pre-commit install
          makim tests.linter

      - name: Setup tmate session
        if: "${{ failure() && (contains(github.event.pull_request.labels.*.name, 'ci:enable-debugging')) }}"
        uses: mxschmitt/action-tmate@v3
